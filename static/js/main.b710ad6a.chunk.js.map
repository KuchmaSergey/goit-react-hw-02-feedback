{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistics/Statistics.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","Object","keys","map","opt","name","onClick","className","Statistics","total","positivePercentage","key","toFixed","Notification","message","propType","PropTypes","string","isRequired","App","state","good","neutral","bad","target","setState","prevState","values","this","reduce","acc","val","countTotalFeedback","StrictMode","countPositiveFeedbackPercentage","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4RAEaA,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OAC9B,mCACEC,OAAOC,KAAKH,GAASI,KAAI,SAAAC,GAAG,OAC5B,wBAECC,KAAMD,EACNE,QAASN,EACTO,UAAU,aAJX,SAMEH,GALIA,SCJII,EAAa,SAAC,GAAD,IAAGT,EAAH,EAAGA,QAASU,EAAZ,EAAYA,MAAOC,EAAnB,EAAmBA,mBAAnB,OACzB,qCACET,OAAOC,KAAKH,GAASI,KAAI,SAAAQ,GAAG,OAC5B,oBAAaJ,UAAU,aAAvB,UACEI,EADF,KACQ,iCAASZ,EAAQY,OADjBA,MAIT,wCACQ,iCAASF,OAEjB,oDACoB,mCAASC,EAAmBE,QAAQ,GAApC,c,OCXTC,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KAEjDD,EAAaE,SAAW,CACvBD,Q,OAASE,EAAUC,OAAOC,Y,IC+CZC,E,4MA7CdC,MAAQ,CACPC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGNvB,gBAAkB,YAAiB,IAC1BK,EADyB,EAAbmB,OACZnB,KACR,EAAKoB,UAAS,SAAAC,GAAS,sBACrBrB,EAAOqB,EAAUrB,GAAQ,O,wDAI5B,WACC,OAAOJ,OAAO0B,OAAOC,KAAKR,OAAOS,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,K,6CAGrE,WACC,OAAQH,KAAKR,MAAMC,KAAOO,KAAKI,qBAAwB,M,oBAGxD,WACC,IAAMvB,EAAQmB,KAAKI,qBAEnB,OACC,eAAC,IAAMC,WAAP,WACC,uDACA,cAAC,EAAD,CACClC,QAAS6B,KAAKR,MACdpB,gBAAiB4B,KAAK5B,kBAEtBS,EACA,cAAC,EAAD,CACCA,MAAOA,EACPC,mBAAoBkB,KAAKM,kCACzBnC,QAAS6B,KAAKR,QAGf,cAAC,EAAD,CAAcN,QAAQ,6B,GAvCTqB,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMb,WAAP,UACE,cAAC,EAAD,MAEFc,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b710ad6a.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nexport const FeedbackOptions = ({ options, onLeaveFeedback }) => (\r\n\t<>\r\n\t\t{Object.keys(options).map(opt => (\r\n\t\t\t<button\r\n\t\t\t\tkey={opt}\r\n\t\t\t\tname={opt}\r\n\t\t\t\tonClick={onLeaveFeedback}\r\n\t\t\t\tclassName=\"capitalize\"\r\n\t\t\t>\r\n\t\t\t\t{opt}\r\n\t\t\t</button>\r\n\t\t))}\r\n\t</>\r\n);\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.object.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Statistics = ({ options, total, positivePercentage }) => (\r\n\t<>\r\n\t\t{Object.keys(options).map(key => (\r\n\t\t\t<p key={key} className=\"capitalize\">\r\n\t\t\t\t{key}: <strong>{options[key]}</strong>\r\n\t\t\t</p>\r\n\t\t))}\r\n\t\t<p>\r\n\t\t\tTotal: <strong>{total}</strong>\r\n\t\t</p>\r\n\t\t<p>\r\n\t\t\tPositive feedback: <strong>{positivePercentage.toFixed(0)}%</strong>\r\n\t\t</p>\r\n\t</>\r\n);\r\n\r\nStatistics.propTypes = {\r\n\toptions: PropTypes.object.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositivePercentage: PropTypes.number.isRequired,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nexport const Notification = ({ message }) => <p>{message}</p>;\r\n\r\nNotification.propType = {\r\n\tmessage: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { FeedbackOptions } from './components/FeedbackOptions';\r\nimport { Statistics } from './components/Statistics';\r\nimport { Notification } from './components/Notification';\r\n\r\nclass App extends Component {\r\n\tstate = {\r\n\t\tgood: 0,\r\n\t\tneutral: 0,\r\n\t\tbad: 0,\r\n\t};\r\n\r\n\tonLeaveFeedback = ({ target }) => {\r\n\t\tconst { name } = target;\r\n\t\tthis.setState(prevState => ({\r\n\t\t\t[name]: prevState[name] + 1,\r\n\t\t}));\r\n\t};\r\n\r\n\tcountTotalFeedback() {\r\n\t\treturn Object.values(this.state).reduce((acc, val) => (acc += val), 0);\r\n\t}\r\n\r\n\tcountPositiveFeedbackPercentage() {\r\n\t\treturn (this.state.good / this.countTotalFeedback()) * 100;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst total = this.countTotalFeedback();\r\n\r\n\t\treturn (\r\n\t\t\t<React.StrictMode>\r\n\t\t\t\t<h1>Please leave feedback</h1>\r\n\t\t\t\t<FeedbackOptions\r\n\t\t\t\t\toptions={this.state}\r\n\t\t\t\t\tonLeaveFeedback={this.onLeaveFeedback}\r\n\t\t\t\t/>\r\n\t\t\t\t{total ? (\r\n\t\t\t\t\t<Statistics\r\n\t\t\t\t\t\ttotal={total}\r\n\t\t\t\t\t\tpositivePercentage={this.countPositiveFeedbackPercentage()}\r\n\t\t\t\t\t\toptions={this.state}\r\n\t\t\t\t\t/>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<Notification message=\"No feedback given\" />\r\n\t\t\t\t)}\r\n\t\t\t</React.StrictMode>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}